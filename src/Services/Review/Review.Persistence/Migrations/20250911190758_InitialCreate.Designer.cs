// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Review.Persistence;

#nullable disable

namespace Review.Persistence.Migrations
{
    [DbContext(typeof(ReviewDbContext))]
    [Migration("20250911190758_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Review.Domain.Articles.Article", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    b.Property<int>("CreatedById")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<int>("JournalId")
                        .HasColumnType("int");

                    b.Property<int?>("LastModifiedById")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Scope")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)");

                    b.Property<string>("Stage")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<int?>("SubmittedById")
                        .HasColumnType("int");

                    b.Property<DateTime?>("SubmittedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.HasKey("Id");

                    b.HasIndex("JournalId");

                    b.HasIndex("Stage");

                    b.HasIndex("SubmittedById");

                    b.HasIndex("Title");

                    b.ToTable("Article", (string)null);
                });

            modelBuilder.Entity("Review.Domain.Articles.ArticleAction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ActionType")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<int>("ArticleId")
                        .HasColumnType("int");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CreatedById")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ArticleId");

                    b.ToTable("ArticleAction", (string)null);
                });

            modelBuilder.Entity("Review.Domain.Articles.ArticleActor", b =>
                {
                    b.Property<int>("ArticleId")
                        .HasColumnType("int");

                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.Property<string>("Role")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)")
                        .HasDefaultValue("AUT");

                    b.Property<string>("TypeDiscriminator")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)");

                    b.HasKey("ArticleId", "PersonId", "Role");

                    b.HasIndex("PersonId");

                    b.ToTable("ArticleActor", (string)null);

                    b.HasDiscriminator<string>("TypeDiscriminator").HasValue("ArticleActor");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Review.Domain.Articles.ArticleStageTransition", b =>
                {
                    b.Property<string>("CurrentStage")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("ActionType")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("DestinationStage")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.HasKey("CurrentStage", "ActionType", "DestinationStage");

                    b.ToTable("ArticleStageTransition", (string)null);

                    b.HasData(
                        new
                        {
                            CurrentStage = "InitialApproved",
                            ActionType = "ApproveForReview",
                            DestinationStage = "UnderReview"
                        },
                        new
                        {
                            CurrentStage = "UnderReview",
                            ActionType = "UploadReviewReport",
                            DestinationStage = "ReadyForDecision"
                        },
                        new
                        {
                            CurrentStage = "ReadyForDecision",
                            ActionType = "RevisionRequested",
                            DestinationStage = "AwaitingRevision"
                        },
                        new
                        {
                            CurrentStage = "AwaitingRevision",
                            ActionType = "UploadManuscript",
                            DestinationStage = "ReadyForDecision"
                        },
                        new
                        {
                            CurrentStage = "ReadyForDecision",
                            ActionType = "AcceptArticle",
                            DestinationStage = "Accepted"
                        },
                        new
                        {
                            CurrentStage = "ReadyForDecision",
                            ActionType = "RejectArticle",
                            DestinationStage = "Rejected"
                        });
                });

            modelBuilder.Entity("Review.Domain.Articles.Stage", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)")
                        .HasColumnOrder(2);

                    b.Property<string>("Info")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)")
                        .HasColumnOrder(1);

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Stage", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 101,
                            Description = "The Author created the article",
                            Info = "The article was created. Please upload the Manuscript and the Supplimentarry materials. Associate the authors with the article.",
                            Name = "Created"
                        },
                        new
                        {
                            Id = 102,
                            Description = "The Manuscript was submitted by the author",
                            Info = "Our editorial specialist is checking your article. We will contact you if we need any further files or information.",
                            Name = "ManuscriptUploaded"
                        },
                        new
                        {
                            Id = 103,
                            Description = "Author uploaded the Manuscript",
                            Info = "The manuscript was uploaded, you can now submit the article.",
                            Name = "Submitted"
                        },
                        new
                        {
                            Id = 104,
                            Description = "Article was rejected by the editorial specialist",
                            Info = "The manuscript does not reach the required quality standard of this journal.",
                            Name = "InitialRejected"
                        },
                        new
                        {
                            Id = 105,
                            Description = "Article approved",
                            Info = "Your article has been checked. Our editorial specialists will start soon revieing it.",
                            Name = "InitialApproved"
                        },
                        new
                        {
                            Id = 201,
                            Description = "Article approved",
                            Info = "Our editorial specialist is reviewing your article.",
                            Name = "UnderReview"
                        },
                        new
                        {
                            Id = 204,
                            Description = "Article accepted",
                            Info = "Your article has been reviewed and accepted. The production of the article will start soon.",
                            Name = "Accepted"
                        },
                        new
                        {
                            Id = 300,
                            Description = "Typesetter assigned",
                            Info = "The typesetter is preparing your Author’s Proof. We will contact you if we need any further files or information.",
                            Name = "InProduction"
                        },
                        new
                        {
                            Id = 301,
                            Description = "Author's proof approved",
                            Info = "The Author's Proof is available for you to check and provide corrections. This status is also displayed if we are preparing a further Author's Proof at your request.",
                            Name = "DraftProduction"
                        },
                        new
                        {
                            Id = 302,
                            Description = "Publisher's proof uploaded",
                            Info = "The typesetter is preparing the final version of your article for publication. We will contact you if we need to check anything further before publication.",
                            Name = "FinalProduction"
                        },
                        new
                        {
                            Id = 304,
                            Description = "Article scheduled for publication",
                            Info = "Your Production Specialist has completed their quality checks. Your article is now scheduled for publication on our website and will appear online within the next few working days.",
                            Name = "PublicationScheduled"
                        },
                        new
                        {
                            Id = 305,
                            Description = "Article published",
                            Info = "Your article has been published and sent to all relevant repositories, and the publication process is now complete. Please note that repositories have different processing times and your article may not be available yet.",
                            Name = "Published"
                        });
                });

            modelBuilder.Entity("Review.Domain.Articles.StageHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ArticleId")
                        .HasColumnType("int");

                    b.Property<int>("StageId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ArticleId");

                    b.HasIndex("StageId");

                    b.ToTable("StageHistory", (string)null);
                });

            modelBuilder.Entity("Review.Domain.Assets.Asset", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ArticleId")
                        .HasColumnType("int");

                    b.Property<int>("CreatedById")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<int?>("LastModifiedById")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.ComplexProperty<Dictionary<string, object>>("File", "Review.Domain.Assets.Asset.File#File", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("FileServerId")
                                .IsRequired()
                                .HasMaxLength(64)
                                .HasColumnType("nvarchar(64)");

                            b1.Property<string>("OriginalName")
                                .IsRequired()
                                .HasMaxLength(256)
                                .HasColumnType("nvarchar(256)")
                                .HasComment("Original full file name, with extension");

                            b1.Property<long>("Size")
                                .HasColumnType("bigint")
                                .HasComment("Size of the file in kilobytes");

                            b1.ComplexProperty<Dictionary<string, object>>("Extension", "Review.Domain.Assets.Asset.File#File.Extension#FileExtension", b2 =>
                                {
                                    b2.IsRequired();

                                    b2.Property<string>("Value")
                                        .IsRequired()
                                        .HasMaxLength(8)
                                        .HasColumnType("nvarchar(8)")
                                        .HasColumnName("File_Extension");
                                });

                            b1.ComplexProperty<Dictionary<string, object>>("Name", "Review.Domain.Assets.Asset.File#File.Name#FileName", b2 =>
                                {
                                    b2.IsRequired();

                                    b2.Property<string>("Value")
                                        .IsRequired()
                                        .HasMaxLength(64)
                                        .HasColumnType("nvarchar(64)")
                                        .HasColumnName("File_Name")
                                        .HasComment("Final name of the file after renaming");
                                });
                        });

                    b.ComplexProperty<Dictionary<string, object>>("Name", "Review.Domain.Assets.Asset.Name#AssetName", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(64)
                                .HasColumnType("nvarchar(64)")
                                .HasColumnName("Name");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("Number", "Review.Domain.Assets.Asset.Number#AssetNumber", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<int>("Value")
                                .HasColumnType("int")
                                .HasColumnName("Number");
                        });

                    b.HasKey("Id");

                    b.HasIndex("ArticleId");

                    b.HasIndex("Type");

                    b.ToTable("Asset", (string)null);
                });

            modelBuilder.Entity("Review.Domain.Assets.AssetTypeDefinition", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("DefaultFileExtension")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)")
                        .HasDefaultValue("pdf");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)")
                        .HasColumnOrder(2);

                    b.Property<byte>("MaxAssetCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasDefaultValue((byte)0);

                    b.Property<byte>("MaxFileSizeInMB")
                        .HasColumnType("tinyint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)")
                        .HasColumnOrder(1);

                    b.ComplexProperty<Dictionary<string, object>>("AllowedFileExtensions", "Review.Domain.Assets.AssetTypeDefinition.AllowedFileExtensions#FileExtensions", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Extensions")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("AllowedFileExtensions");
                        });

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("AssetTypeDefinition", (string)null);
                });

            modelBuilder.Entity("Review.Domain.Invitations.ReviewInvitation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ArticleId")
                        .HasColumnType("int");

                    b.Property<int>("CreatedById")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ExpiresOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<int?>("LastModifiedById")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<int>("SentById")
                        .HasColumnType("int");

                    b.Property<DateTime>("SentOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.ComplexProperty<Dictionary<string, object>>("Email", "Review.Domain.Invitations.ReviewInvitation.Email#EmailAddress", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(64)
                                .HasColumnType("nvarchar(64)")
                                .HasColumnName("Email");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("Token", "Review.Domain.Invitations.ReviewInvitation.Token#InvitationToken", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(64)
                                .HasColumnType("nvarchar(64)")
                                .HasColumnName("Token");
                        });

                    b.HasKey("Id");

                    b.HasIndex("ArticleId");

                    b.HasIndex("SentById");

                    b.ToTable("ReviewInvitation", (string)null);
                });

            modelBuilder.Entity("Review.Domain.Reviewers.ReviewerSpecialization", b =>
                {
                    b.Property<int>("JournalId")
                        .HasColumnType("int");

                    b.Property<int>("ReviewerId")
                        .HasColumnType("int");

                    b.HasKey("JournalId", "ReviewerId");

                    b.HasIndex("ReviewerId");

                    b.ToTable("ReviewerSpecialization", (string)null);
                });

            modelBuilder.Entity("Review.Domain.Shared.Journal", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    b.Property<string>("Abbreviation")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("nvarchar(16)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.HasKey("Id");

                    b.ToTable("Journal", (string)null);
                });

            modelBuilder.Entity("Review.Domain.Shared.Person", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    b.Property<string>("Affiliation")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasComment("Institution or organization they are associated with when they conduct their research.");

                    b.Property<int>("CreatedById")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("Honorific")
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.Property<int?>("LastModifiedById")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("TypeDiscriminator")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.ComplexProperty<Dictionary<string, object>>("Email", "Review.Domain.Shared.Person.Email#EmailAddress", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(64)
                                .HasColumnType("nvarchar(64)")
                                .HasColumnName("Email");
                        });

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL");

                    b.ToTable("Person", (string)null);

                    b.HasDiscriminator<string>("TypeDiscriminator").HasValue("Person");

                    b
                        .UseTphMappingStrategy()
                        .HasAnnotation("RawSql:Index", "CREATE UNIQUE INDEX IX_Person_Email_TypeDiscriminator ON Person (Email, TypeDiscriminator)");
                });

            modelBuilder.Entity("Review.Domain.Articles.ArticleAuthor", b =>
                {
                    b.HasBaseType("Review.Domain.Articles.ArticleActor");

                    b.Property<string>("ContributionAreas")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("ArticleActor", (string)null);

                    b.HasDiscriminator().HasValue("ArticleAuthor");
                });

            modelBuilder.Entity("Review.Domain.Articles.Author", b =>
                {
                    b.HasBaseType("Review.Domain.Shared.Person");

                    b.Property<string>("Degree")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasComment("The author's highest academic qualification (e.g., PhD in Mathematics, MSc in Chemistry).");

                    b.Property<string>("Discipline")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)")
                        .HasComment("The author's main field of study or research (e.g., Biology, Computer Science).");

                    b.ToTable("Person", (string)null);

                    b.HasDiscriminator().HasValue("Author");
                });

            modelBuilder.Entity("Review.Domain.Reviewers.Reviewer", b =>
                {
                    b.HasBaseType("Review.Domain.Shared.Person");

                    b.ToTable("Person", (string)null);

                    b.HasDiscriminator().HasValue("Reviewer");
                });

            modelBuilder.Entity("Review.Domain.Articles.Editor", b =>
                {
                    b.HasBaseType("Review.Domain.Reviewers.Reviewer");

                    b.ToTable("Person", (string)null);

                    b.HasDiscriminator().HasValue("Editor");
                });

            modelBuilder.Entity("Review.Domain.Articles.Article", b =>
                {
                    b.HasOne("Review.Domain.Shared.Journal", "Journal")
                        .WithMany("Articles")
                        .HasForeignKey("JournalId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Review.Domain.Articles.Stage", null)
                        .WithMany()
                        .HasForeignKey("Stage")
                        .HasPrincipalKey("Name")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Review.Domain.Shared.Person", "SubmittedBy")
                        .WithMany()
                        .HasForeignKey("SubmittedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Journal");

                    b.Navigation("SubmittedBy");
                });

            modelBuilder.Entity("Review.Domain.Articles.ArticleAction", b =>
                {
                    b.HasOne("Review.Domain.Articles.Article", null)
                        .WithMany("Actions")
                        .HasForeignKey("ArticleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Review.Domain.Articles.ArticleActor", b =>
                {
                    b.HasOne("Review.Domain.Articles.Article", "Article")
                        .WithMany("Actors")
                        .HasForeignKey("ArticleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Review.Domain.Shared.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Article");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("Review.Domain.Articles.StageHistory", b =>
                {
                    b.HasOne("Review.Domain.Articles.Article", null)
                        .WithMany("StageHistories")
                        .HasForeignKey("ArticleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Review.Domain.Articles.Stage", null)
                        .WithMany()
                        .HasForeignKey("StageId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Review.Domain.Assets.Asset", b =>
                {
                    b.HasOne("Review.Domain.Articles.Article", "Article")
                        .WithMany("Assets")
                        .HasForeignKey("ArticleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Review.Domain.Assets.AssetTypeDefinition", "TypeDefinition")
                        .WithMany()
                        .HasForeignKey("Type")
                        .HasPrincipalKey("Name")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Article");

                    b.Navigation("TypeDefinition");
                });

            modelBuilder.Entity("Review.Domain.Invitations.ReviewInvitation", b =>
                {
                    b.HasOne("Review.Domain.Articles.Article", null)
                        .WithMany("Invitations")
                        .HasForeignKey("ArticleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Review.Domain.Shared.Person", "SentBy")
                        .WithMany()
                        .HasForeignKey("SentById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SentBy");
                });

            modelBuilder.Entity("Review.Domain.Reviewers.ReviewerSpecialization", b =>
                {
                    b.HasOne("Review.Domain.Shared.Journal", "Journal")
                        .WithMany("Reviewers")
                        .HasForeignKey("JournalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Review.Domain.Reviewers.Reviewer", "Reviewer")
                        .WithMany("Specializations")
                        .HasForeignKey("ReviewerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Journal");

                    b.Navigation("Reviewer");
                });

            modelBuilder.Entity("Review.Domain.Articles.Article", b =>
                {
                    b.Navigation("Actions");

                    b.Navigation("Actors");

                    b.Navigation("Assets");

                    b.Navigation("Invitations");

                    b.Navigation("StageHistories");
                });

            modelBuilder.Entity("Review.Domain.Shared.Journal", b =>
                {
                    b.Navigation("Articles");

                    b.Navigation("Reviewers");
                });

            modelBuilder.Entity("Review.Domain.Reviewers.Reviewer", b =>
                {
                    b.Navigation("Specializations");
                });
#pragma warning restore 612, 618
        }
    }
}
