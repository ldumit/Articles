// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Production.Persistence;

#nullable disable

namespace Production.Persistence.Migrations
{
    [DbContext(typeof(ProductionDbContext))]
    partial class ProductionDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Production.Domain.Articles.Article", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("AcceptedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedById")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("Doi")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<int>("JournalId")
                        .HasColumnType("int");

                    b.Property<int?>("LastModifiedById")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<int?>("PublishedById")
                        .HasColumnType("int");

                    b.Property<DateTime?>("PublishedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Stage")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<int>("SubmitedById")
                        .HasColumnType("int");

                    b.Property<DateTime>("SubmitedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("VolumeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("JournalId");

                    b.HasIndex("PublishedById");

                    b.HasIndex("Stage");

                    b.HasIndex("SubmitedById");

                    b.HasIndex("Title");

                    b.ToTable("Article", (string)null);
                });

            modelBuilder.Entity("Production.Domain.Articles.ArticleContributor", b =>
                {
                    b.Property<int>("ArticleId")
                        .HasColumnType("int");

                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.Property<string>("Role")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)")
                        .HasDefaultValue("AUT");

                    b.HasKey("ArticleId", "PersonId", "Role");

                    b.HasIndex("PersonId");

                    b.ToTable("ArticleContributor", (string)null);
                });

            modelBuilder.Entity("Production.Domain.Articles.ArticleStageTransition", b =>
                {
                    b.Property<string>("CurrentStage")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("ActionType")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("DestinationStage")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.HasKey("CurrentStage", "ActionType", "DestinationStage");

                    b.ToTable("ArticleStageTransition", (string)null);

                    b.HasData(
                        new
                        {
                            CurrentStage = "Accepted",
                            ActionType = "AssignTypesetter",
                            DestinationStage = "InProduction"
                        },
                        new
                        {
                            CurrentStage = "FinalProduction",
                            ActionType = "SchedulePublication",
                            DestinationStage = "PublicationScheduled"
                        },
                        new
                        {
                            CurrentStage = "PublicationScheduled",
                            ActionType = "PublishArticle",
                            DestinationStage = "Published"
                        });
                });

            modelBuilder.Entity("Production.Domain.Articles.Stage", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)")
                        .HasColumnOrder(2);

                    b.Property<string>("Info")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)")
                        .HasColumnOrder(1);

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Stage", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 101,
                            Description = "The Author created the Article",
                            Info = "The article has been created. Please upload the Manuscript and any Supplementary materials. Associate the authors with the article.",
                            Name = "Created"
                        },
                        new
                        {
                            Id = 102,
                            Description = "Author uploaded the Manuscript file",
                            Info = "The manuscript has been uploaded. You can now submit the article for editorial checks.",
                            Name = "ManuscriptUploaded"
                        },
                        new
                        {
                            Id = 103,
                            Description = "The Manuscript was submitted by the author for editorial checks",
                            Info = "Our editorial specialists are checking your article. We will contact you if we need additional files or information.",
                            Name = "Submitted"
                        },
                        new
                        {
                            Id = 104,
                            Description = "Manuscript failed the initial editorial checks",
                            Info = "The manuscript does not meet the required quality standards of this journal.",
                            Name = "InitialRejected"
                        },
                        new
                        {
                            Id = 105,
                            Description = "Manuscript passed the initial editorial checks",
                            Info = "Your manuscript has passed the initial checks. It will now move forward for review.",
                            Name = "InitialApproved"
                        },
                        new
                        {
                            Id = 201,
                            Description = "Article is under peer review",
                            Info = "Your article is currently being reviewed by experts in the field.",
                            Name = "UnderReview"
                        },
                        new
                        {
                            Id = 202,
                            Description = "All reviewer feedback received, pending editor's decision",
                            Info = "Reviewer feedback has been received. The editor will now make a decision on your article.",
                            Name = "ReadyForDecision"
                        },
                        new
                        {
                            Id = 203,
                            Description = "Editor requested a revised manuscript from the author",
                            Info = "The editor has requested revisions. Please upload your revised manuscript to continue the review process.",
                            Name = "AwaitingRevision"
                        },
                        new
                        {
                            Id = 204,
                            Description = "Article rejected after review",
                            Info = "Your article was rejected following review. Please read the feedback carefully if you plan to resubmit.",
                            Name = "Rejected"
                        },
                        new
                        {
                            Id = 205,
                            Description = "Article accepted after review",
                            Info = "Your article has been accepted for publication. The production process will now begin.",
                            Name = "Accepted"
                        },
                        new
                        {
                            Id = 300,
                            Description = "Typesetter assigned to the article",
                            Info = "A typesetter has been assigned and is preparing your Author’s Proof.",
                            Name = "InProduction"
                        },
                        new
                        {
                            Id = 301,
                            Description = "Typesetter uploaded the draft PDF for author approval",
                            Info = "The Author’s Proof (draft PDF) is available for you to check and provide corrections.",
                            Name = "DraftProduction"
                        },
                        new
                        {
                            Id = 302,
                            Description = "Author approved the draft PDF, finalization in progress",
                            Info = "The typesetter is preparing the final version of your article for publication.",
                            Name = "FinalProduction"
                        },
                        new
                        {
                            Id = 304,
                            Description = "Article scheduled for online publication",
                            Info = "Quality checks are complete. Your article is scheduled for publication and will appear online within the next few working days.",
                            Name = "PublicationScheduled"
                        },
                        new
                        {
                            Id = 305,
                            Description = "Article published",
                            Info = "Your article has been published and sent to repositories. Availability in repositories may vary depending on their processing times.",
                            Name = "Published"
                        });
                });

            modelBuilder.Entity("Production.Domain.Articles.StageHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ArticleId")
                        .HasColumnType("int");

                    b.Property<int>("StageId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ArticleId");

                    b.HasIndex("StageId");

                    b.ToTable("StageHistory", (string)null);
                });

            modelBuilder.Entity("Production.Domain.Assets.Asset", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ArticleId")
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<int>("CreatedById")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<int?>("LastModifiedById")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.ComplexProperty<Dictionary<string, object>>("Name", "Production.Domain.Assets.Asset.Name#AssetName", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(64)
                                .HasColumnType("nvarchar(64)")
                                .HasColumnName("Name");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("Number", "Production.Domain.Assets.Asset.Number#AssetNumber", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<byte>("Value")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("tinyint")
                                .HasDefaultValue((byte)0)
                                .HasColumnName("Number");
                        });

                    b.HasKey("Id");

                    b.HasIndex("ArticleId");

                    b.HasIndex("Type");

                    b.ToTable("Asset", (string)null);
                });

            modelBuilder.Entity("Production.Domain.Assets.AssetAction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AssetId")
                        .HasColumnType("int");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CreatedById")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int?>("LastModifiedById")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("TypeId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.HasKey("Id");

                    b.HasIndex("AssetId");

                    b.ToTable("AssetAction", (string)null);
                });

            modelBuilder.Entity("Production.Domain.Assets.AssetCurrentFileLink", b =>
                {
                    b.Property<int>("AssetId")
                        .HasColumnType("int");

                    b.Property<int>("FileId")
                        .HasColumnType("int");

                    b.HasKey("AssetId");

                    b.HasIndex("FileId")
                        .IsUnique();

                    b.ToTable("AssetCurrentFileLink", (string)null);
                });

            modelBuilder.Entity("Production.Domain.Assets.AssetStateTransition", b =>
                {
                    b.Property<string>("CurrentState")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("ActionType")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("DestinationState")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.HasKey("CurrentState", "ActionType", "DestinationState");

                    b.ToTable("AssetStateTransition", (string)null);

                    b.HasData(
                        new
                        {
                            CurrentState = "None",
                            ActionType = "Upload",
                            DestinationState = "Uploaded"
                        },
                        new
                        {
                            CurrentState = "None",
                            ActionType = "Request",
                            DestinationState = "Requested"
                        },
                        new
                        {
                            CurrentState = "Uploaded",
                            ActionType = "Request",
                            DestinationState = "Requested"
                        },
                        new
                        {
                            CurrentState = "Uploaded",
                            ActionType = "Upload",
                            DestinationState = "Uploaded"
                        },
                        new
                        {
                            CurrentState = "Uploaded",
                            ActionType = "Approve",
                            DestinationState = "Approved"
                        },
                        new
                        {
                            CurrentState = "Requested",
                            ActionType = "Upload",
                            DestinationState = "Uploaded"
                        },
                        new
                        {
                            CurrentState = "Requested",
                            ActionType = "CancelRequest",
                            DestinationState = "Uploaded"
                        });
                });

            modelBuilder.Entity("Production.Domain.Assets.AssetStateTransitionCondition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ActionTypes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ArticleStage")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("AssetTypes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AssetStateTransitionCondition", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ActionTypes = "[0,2,3]",
                            ArticleStage = "InProduction",
                            AssetTypes = "[1,11,12,10]"
                        },
                        new
                        {
                            Id = 2,
                            ActionTypes = "[0,2,3]",
                            ArticleStage = "DraftProduction",
                            AssetTypes = "[1,11,12,10]"
                        },
                        new
                        {
                            Id = 3,
                            ActionTypes = "[0]",
                            ArticleStage = "InProduction",
                            AssetTypes = "[3]"
                        },
                        new
                        {
                            Id = 4,
                            ActionTypes = "[0,2,3,1]",
                            ArticleStage = "DraftProduction",
                            AssetTypes = "[3]"
                        },
                        new
                        {
                            Id = 5,
                            ActionTypes = "[0,2,3]",
                            ArticleStage = "FinalProduction",
                            AssetTypes = "[4,5,6]"
                        });
                });

            modelBuilder.Entity("Production.Domain.Assets.AssetTypeDefinition", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int>("DefaultCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("DefaultFileExtension")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)")
                        .HasDefaultValue("pdf");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)")
                        .HasColumnOrder(2);

                    b.Property<byte>("MaxFileSizeInMB")
                        .HasColumnType("tinyint");

                    b.Property<byte>("MaxNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasDefaultValue((byte)0);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)")
                        .HasColumnOrder(1);

                    b.ComplexProperty<Dictionary<string, object>>("AllowedFileExtensions", "Production.Domain.Assets.AssetTypeDefinition.AllowedFileExtensions#AllowedFileExtensions", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Extensions")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("AllowedFileExtensions");
                        });

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("AssetTypeDefinition", (string)null);
                });

            modelBuilder.Entity("Production.Domain.Assets.File", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AssetId")
                        .HasColumnType("int");

                    b.Property<int>("CreatedById")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("FileServerId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<int?>("LastModifiedById")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("OriginalName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasComment("Original full file name, with extension");

                    b.Property<long>("Size")
                        .HasColumnType("bigint")
                        .HasComment("Size of the file in kilobytes");

                    b.ComplexProperty<Dictionary<string, object>>("Extension", "Production.Domain.Assets.File.Extension#FileExtension", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(8)
                                .HasColumnType("nvarchar(8)")
                                .HasColumnName("Extension");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("Name", "Production.Domain.Assets.File.Name#FileName", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(64)
                                .HasColumnType("nvarchar(64)")
                                .HasColumnName("Name")
                                .HasComment("Final name of the file after renaming");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("Version", "Production.Domain.Assets.File.Version#FileVersion", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<byte>("Value")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("tinyint")
                                .HasDefaultValue((byte)1)
                                .HasColumnName("Version");
                        });

                    b.HasKey("Id");

                    b.HasIndex("AssetId");

                    b.ToTable("File", (string)null);
                });

            modelBuilder.Entity("Production.Domain.Shared.Journal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Abbreviation")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<int>("DefaultTypesetterId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.HasKey("Id");

                    b.HasIndex("DefaultTypesetterId");

                    b.ToTable("Journal", (string)null);
                });

            modelBuilder.Entity("Production.Domain.Shared.Person", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Affiliation")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasComment("Institution or organization they are associated with when they conduct their research.");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("Title")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("TypeDiscriminator")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL");

                    b.ToTable("Person", (string)null);

                    b.HasDiscriminator<string>("TypeDiscriminator").HasValue("Person");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Production.Domain.Articles.Author", b =>
                {
                    b.HasBaseType("Production.Domain.Shared.Person");

                    b.ToTable("Person", (string)null);

                    b.HasDiscriminator().HasValue("Author");
                });

            modelBuilder.Entity("Production.Domain.Articles.Typesetter", b =>
                {
                    b.HasBaseType("Production.Domain.Shared.Person");

                    b.Property<string>("CompanyName")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<bool?>("IsDefault")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.ToTable("Person", (string)null);

                    b.HasDiscriminator().HasValue("Typesetter");
                });

            modelBuilder.Entity("Production.Domain.Articles.Article", b =>
                {
                    b.HasOne("Production.Domain.Shared.Journal", "Journal")
                        .WithMany("Articles")
                        .HasForeignKey("JournalId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Production.Domain.Shared.Person", "PublishedBy")
                        .WithMany()
                        .HasForeignKey("PublishedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Production.Domain.Articles.Stage", null)
                        .WithMany()
                        .HasForeignKey("Stage")
                        .HasPrincipalKey("Name")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Production.Domain.Shared.Person", "SubmitedBy")
                        .WithMany()
                        .HasForeignKey("SubmitedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Journal");

                    b.Navigation("PublishedBy");

                    b.Navigation("SubmitedBy");
                });

            modelBuilder.Entity("Production.Domain.Articles.ArticleContributor", b =>
                {
                    b.HasOne("Production.Domain.Articles.Article", "Article")
                        .WithMany("Contributors")
                        .HasForeignKey("ArticleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Production.Domain.Shared.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Article");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("Production.Domain.Articles.StageHistory", b =>
                {
                    b.HasOne("Production.Domain.Articles.Article", "Article")
                        .WithMany("StageHistories")
                        .HasForeignKey("ArticleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Production.Domain.Articles.Stage", "Stage")
                        .WithMany()
                        .HasForeignKey("StageId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Article");

                    b.Navigation("Stage");
                });

            modelBuilder.Entity("Production.Domain.Assets.Asset", b =>
                {
                    b.HasOne("Production.Domain.Articles.Article", "Article")
                        .WithMany("Assets")
                        .HasForeignKey("ArticleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Production.Domain.Assets.AssetTypeDefinition", "TypeDefinition")
                        .WithMany()
                        .HasForeignKey("Type")
                        .HasPrincipalKey("Name")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Article");

                    b.Navigation("TypeDefinition");
                });

            modelBuilder.Entity("Production.Domain.Assets.AssetAction", b =>
                {
                    b.HasOne("Production.Domain.Assets.Asset", "Asset")
                        .WithMany("Actions")
                        .HasForeignKey("AssetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Asset");
                });

            modelBuilder.Entity("Production.Domain.Assets.AssetCurrentFileLink", b =>
                {
                    b.HasOne("Production.Domain.Assets.Asset", "Asset")
                        .WithOne("CurrentFileLink")
                        .HasForeignKey("Production.Domain.Assets.AssetCurrentFileLink", "AssetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Production.Domain.Assets.File", "File")
                        .WithOne()
                        .HasForeignKey("Production.Domain.Assets.AssetCurrentFileLink", "FileId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Asset");

                    b.Navigation("File");
                });

            modelBuilder.Entity("Production.Domain.Assets.File", b =>
                {
                    b.HasOne("Production.Domain.Assets.Asset", "Asset")
                        .WithMany("Files")
                        .HasForeignKey("AssetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Asset");
                });

            modelBuilder.Entity("Production.Domain.Shared.Journal", b =>
                {
                    b.HasOne("Production.Domain.Articles.Typesetter", "DefaultTypesetter")
                        .WithMany()
                        .HasForeignKey("DefaultTypesetterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("DefaultTypesetter");
                });

            modelBuilder.Entity("Production.Domain.Articles.Article", b =>
                {
                    b.Navigation("Assets");

                    b.Navigation("Contributors");

                    b.Navigation("StageHistories");
                });

            modelBuilder.Entity("Production.Domain.Assets.Asset", b =>
                {
                    b.Navigation("Actions");

                    b.Navigation("CurrentFileLink");

                    b.Navigation("Files");
                });

            modelBuilder.Entity("Production.Domain.Shared.Journal", b =>
                {
                    b.Navigation("Articles");
                });
#pragma warning restore 612, 618
        }
    }
}
