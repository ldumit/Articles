// <auto-generated />
using System;
using ArticleHub.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace ArticleHub.Persistence.Migrations
{
    [DbContext(typeof(ArticleHubDbContext))]
    partial class ArticleHubDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ArticleHub.Domain.Entities.Article", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasColumnOrder(0);

                    b.Property<DateTime?>("AcceptedOn")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("accepted_on");

                    b.Property<string>("Doi")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("doi");

                    b.Property<int>("JournalId")
                        .HasColumnType("integer")
                        .HasColumnName("journal_id");

                    b.Property<DateTime?>("PublishedOn")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("published_on");

                    b.Property<string>("Stage")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("stage");

                    b.Property<int>("SubmittedById")
                        .HasColumnType("integer")
                        .HasColumnName("submitted_by_id");

                    b.Property<DateTime>("SubmittedOn")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("submitted_on");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("title");

                    b.HasKey("Id")
                        .HasName("pk_articles");

                    b.HasIndex("JournalId")
                        .HasDatabaseName("ix_articles_journal_id");

                    b.HasIndex("SubmittedById")
                        .HasDatabaseName("ix_articles_submitted_by_id");

                    b.HasIndex("Title")
                        .HasDatabaseName("ix_articles_title");

                    b.ToTable("articles", (string)null);
                });

            modelBuilder.Entity("ArticleHub.Domain.Entities.ArticleActor", b =>
                {
                    b.Property<int>("ArticleId")
                        .HasColumnType("integer")
                        .HasColumnName("article_id");

                    b.Property<int>("PersonId")
                        .HasColumnType("integer")
                        .HasColumnName("person_id");

                    b.Property<string>("Role")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasDefaultValue("AUT")
                        .HasColumnName("role");

                    b.HasKey("ArticleId", "PersonId", "Role")
                        .HasName("pk_article_contributors");

                    b.HasIndex("PersonId")
                        .HasDatabaseName("ix_article_contributors_person_id");

                    b.ToTable("article_contributors", (string)null);
                });

            modelBuilder.Entity("ArticleHub.Domain.Entities.Journal", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasColumnOrder(0);

                    b.Property<string>("Abbreviation")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("character varying(8)")
                        .HasColumnName("abbreviation");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_journals");

                    b.ToTable("journals", (string)null);
                });

            modelBuilder.Entity("ArticleHub.Domain.Entities.Person", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasColumnOrder(0);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("first_name");

                    b.Property<string>("Honorific")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("honorific");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("last_name");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_persons");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasDatabaseName("ix_persons_user_id");

                    b.ToTable("persons", (string)null);
                });

            modelBuilder.Entity("ArticleHub.Domain.Entities.Article", b =>
                {
                    b.HasOne("ArticleHub.Domain.Entities.Journal", "Journal")
                        .WithMany("Articles")
                        .HasForeignKey("JournalId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_articles_journals_journal_id");

                    b.HasOne("ArticleHub.Domain.Entities.Person", "SubmittedBy")
                        .WithMany()
                        .HasForeignKey("SubmittedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_articles_persons_submitted_by_id");

                    b.Navigation("Journal");

                    b.Navigation("SubmittedBy");
                });

            modelBuilder.Entity("ArticleHub.Domain.Entities.ArticleActor", b =>
                {
                    b.HasOne("ArticleHub.Domain.Entities.Article", null)
                        .WithMany("Actors")
                        .HasForeignKey("ArticleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_article_contributors_articles_article_id");

                    b.HasOne("ArticleHub.Domain.Entities.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_article_contributors_persons_person_id");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("ArticleHub.Domain.Entities.Article", b =>
                {
                    b.Navigation("Actors");
                });

            modelBuilder.Entity("ArticleHub.Domain.Entities.Journal", b =>
                {
                    b.Navigation("Articles");
                });
#pragma warning restore 612, 618
        }
    }
}
