// <auto-generated />
using System;
using ArticleTimeline.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ArticleTimeline.Persistence.Migrations
{
    [DbContext(typeof(ArticleTimelineDbContext))]
    [Migration("20241009060625_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("ArticleTimeline")
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ArticleTimeline.Domain.Timeline", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ArticleId")
                        .HasColumnType("int");

                    b.Property<int>("CreatedById")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("CurrentStage")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("FileId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LasModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<int?>("LastModifiedById")
                        .HasColumnType("int");

                    b.Property<string>("PreviousStage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SourceId")
                        .IsRequired()
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("SourceType")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("TemplateId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("SourceType", "SourceId");

                    b.ToTable("Timelines", "ArticleTimeline");
                });

            modelBuilder.Entity("ArticleTimeline.Domain.TimelineTemplate", b =>
                {
                    b.Property<string>("SourceType")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SourceId")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("DescriptionTemplate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TitleTemplate")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("SourceType", "SourceId");

                    b.ToTable("TimelineTemplate", "ArticleTimeline");

                    b.HasData(
                        new
                        {
                            SourceType = "StageTransition",
                            SourceId = "Accepted->InProduction",
                            DescriptionTemplate = "<<RoleUser>> has started production.",
                            TitleTemplate = "<<PreviousStage>> stage completed"
                        },
                        new
                        {
                            SourceType = "StageTransition",
                            SourceId = "InProduction->DraftProduction",
                            DescriptionTemplate = "<<RoleUser>> has uploaded the Draft Pdf.",
                            TitleTemplate = "<<PreviousStage>> stage completed"
                        },
                        new
                        {
                            SourceType = "StageTransition",
                            SourceId = "DraftProduction->FinalProduction",
                            DescriptionTemplate = "<<RoleUser>> has aproved production.",
                            TitleTemplate = "<<PreviousStage>> stage completed"
                        },
                        new
                        {
                            SourceType = "StageTransition",
                            SourceId = "FinalProduction->Published",
                            DescriptionTemplate = "<<RoleUser>> has published the article.",
                            TitleTemplate = "<<PreviousStage>> stage completed"
                        });
                });

            modelBuilder.Entity("ArticleTimeline.Domain.TimelineVisibility", b =>
                {
                    b.Property<string>("SourceType")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SourceId")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("RoleType")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("SourceType", "SourceId", "RoleType");

                    b.ToTable("TimelineVisibility", "ArticleTimeline");

                    b.HasData(
                        new
                        {
                            SourceType = "StageTransition",
                            SourceId = "Accepted->InProduction",
                            RoleType = "POF"
                        },
                        new
                        {
                            SourceType = "StageTransition",
                            SourceId = "InProduction->DraftProduction",
                            RoleType = "POF"
                        },
                        new
                        {
                            SourceType = "StageTransition",
                            SourceId = "DraftProduction->FinalProduction",
                            RoleType = "POF"
                        },
                        new
                        {
                            SourceType = "StageTransition",
                            SourceId = "FinalProduction->Published",
                            RoleType = "POF"
                        },
                        new
                        {
                            SourceType = "StageTransition",
                            SourceId = "Accepted->InProduction",
                            RoleType = "TSOF"
                        },
                        new
                        {
                            SourceType = "StageTransition",
                            SourceId = "InProduction->DraftProduction",
                            RoleType = "TSOF"
                        },
                        new
                        {
                            SourceType = "StageTransition",
                            SourceId = "DraftProduction->FinalProduction",
                            RoleType = "TSOF"
                        },
                        new
                        {
                            SourceType = "StageTransition",
                            SourceId = "FinalProduction->Published",
                            RoleType = "TSOF"
                        },
                        new
                        {
                            SourceType = "StageTransition",
                            SourceId = "InProduction->DraftProduction",
                            RoleType = "CORAUT"
                        },
                        new
                        {
                            SourceType = "StageTransition",
                            SourceId = "FinalProduction->Published",
                            RoleType = "CORAUT"
                        });
                });

            modelBuilder.Entity("ArticleTimeline.Domain.Timeline", b =>
                {
                    b.HasOne("ArticleTimeline.Domain.TimelineTemplate", "Template")
                        .WithMany()
                        .HasForeignKey("SourceType", "SourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Template");
                });
#pragma warning restore 612, 618
        }
    }
}
