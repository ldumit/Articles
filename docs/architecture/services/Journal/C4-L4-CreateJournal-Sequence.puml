@startuml
skinparam participant {
  FontSize 12
  BackgroundColor White
  BorderColor Black
}
skinparam boxPadding 5
skinparam boxBorderThickness 1

actor Client

box " API / Application Layer " #E6F0FF
  participant Endpoint as "CreateJournalEndpoint\n(FastEndpoints)"
  participant Validator as "CreateJournalValidator\n(FluentValidation)"
end box

box " Persistence Layer " #FFE0E0
  participant JournalRepository as "Repository<Journal>\n(Redis OM)"
  participant EditorRepository as "Repository<Editor>\n(Redis OM)"
end box

box " Domain Layer " #FFF0E0
  participant Journal as "Journal\n(Aggregate)"
  participant Editor as "Editor\n(Entity)"
end box

box " External Auth Service " #E0FFE0
  participant PersonService as "IPersonService\n(Auth gRPC)"
end box

Client -> Endpoint : HTTP POST /journals (CreateJournalCommand)
activate Endpoint

Endpoint -> Validator : Validate command
Validator --> Endpoint : OK

Endpoint -> JournalRepository : Check if Abbreviation/Name exists
JournalRepository --> Endpoint : Exists / NotExists

Endpoint -> EditorRepository : AnyAsync(ChiefEditorId)
EditorRepository --> Endpoint : true / false

alt ChiefEditor NotExists
  Endpoint -> PersonService : GetPersonByUserIdAsync(ChiefEditorId)
  PersonService --> Endpoint : PersonInfo

  Endpoint -> Editor : Map(PersonInfo to Editor)
  Endpoint -> EditorRepository : AddAsync(Editor)
  EditorRepository --> Endpoint : OK
end

Endpoint -> Journal : Map(CreateJournalCommand)

Endpoint -> JournalRepository : AddAsync(Journal)
JournalRepository --> Endpoint : OK

Endpoint -> JournalRepository : SaveAllAsync()
JournalRepository --> Endpoint : OK

Endpoint --> Client : 200 OK (IdResponse)
deactivate Endpoint
@enduml
