// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Production.Database;

#nullable disable

namespace Production.Database.Migrations
{
    [DbContext(typeof(DbContext))]
    partial class DbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Production.Domain.Entities.Article", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("AcceptedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedById")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<int>("CurrentStageId")
                        .HasColumnType("int");

                    b.Property<string>("Doi")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("JournalId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LasModifiedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<int?>("LastModifiedById")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int?>("PublishedById")
                        .HasColumnType("int");

                    b.Property<DateTime?>("PublishedOn")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<int>("SubmitedById")
                        .HasColumnType("int");

                    b.Property<DateTime>("SubmitedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("TypesetterId")
                        .HasColumnType("int");

                    b.Property<int>("VolumeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("JournalId");

                    b.HasIndex("PublishedById");

                    b.HasIndex("SubmitedById");

                    b.HasIndex("Title");

                    b.HasIndex("TypesetterId");

                    b.ToTable("Articles");
                });

            modelBuilder.Entity("Production.Domain.Entities.ArticleCurrentStage", b =>
                {
                    b.Property<int>("ArticleId")
                        .HasColumnType("int");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int>("StageId")
                        .HasColumnType("int");

                    b.HasKey("ArticleId");

                    b.HasIndex("StageId")
                        .IsUnique();

                    b.ToTable("ArticleCurrentStage");
                });

            modelBuilder.Entity("Production.Domain.Entities.Asset", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ArticleId")
                        .HasColumnType("int");

                    b.Property<int>("AssetNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int>("CreatedById")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<DateTime?>("LasModifiedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<int?>("LastModifiedById")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int>("LatestFileId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<int>("TypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ArticleId");

                    b.HasIndex("TypeId");

                    b.ToTable("Assets");
                });

            modelBuilder.Entity("Production.Domain.Entities.AssetLatestFile", b =>
                {
                    b.Property<int>("AssetId")
                        .HasColumnType("int");

                    b.Property<int>("FileId")
                        .HasColumnType("int");

                    b.HasKey("AssetId");

                    b.HasIndex("FileId")
                        .IsUnique();

                    b.ToTable("AssetLatestFile");
                });

            modelBuilder.Entity("Production.Domain.Entities.AssetType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("DefaultCategory")
                        .HasColumnType("int");

                    b.Property<int>("DefaultCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("AssetTypes");

                    b.HasData(
                        new
                        {
                            Id = 24,
                            Code = "DOAJ_JSON",
                            DefaultCategory = 0,
                            DefaultCategoryId = 3,
                            Name = "Doaj Json"
                        },
                        new
                        {
                            Id = 1,
                            Code = "MANUSCRIPT",
                            DefaultCategory = 0,
                            DefaultCategoryId = 1,
                            Name = "Manuscript"
                        },
                        new
                        {
                            Id = 2,
                            Code = "FIGURE",
                            DefaultCategory = 0,
                            DefaultCategoryId = 1,
                            Name = "Figure"
                        },
                        new
                        {
                            Id = 8,
                            Code = "PMC_XML",
                            DefaultCategory = 0,
                            DefaultCategoryId = 1,
                            Name = "PMC XML"
                        },
                        new
                        {
                            Id = 11,
                            Code = "FRONTIERS_MANUSCRIPT",
                            DefaultCategory = 0,
                            DefaultCategoryId = 1,
                            Name = "Frontiers Manuscript"
                        },
                        new
                        {
                            Id = 12,
                            Code = "MANUSCRIPT_SOURCE",
                            DefaultCategory = 0,
                            DefaultCategoryId = 1,
                            Name = "Manuscript Source"
                        },
                        new
                        {
                            Id = 18,
                            Code = "FRONTIERS_XML",
                            DefaultCategory = 0,
                            DefaultCategoryId = 1,
                            Name = "Frontiers XML"
                        },
                        new
                        {
                            Id = 3,
                            Code = "TABLE",
                            DefaultCategory = 0,
                            DefaultCategoryId = 2,
                            Name = "Supplementary Table"
                        },
                        new
                        {
                            Id = 13,
                            Code = "DATA_SHEET",
                            DefaultCategory = 0,
                            DefaultCategoryId = 2,
                            Name = "Supplementary Data Sheet"
                        },
                        new
                        {
                            Id = 14,
                            Code = "PRESENTATION",
                            DefaultCategory = 0,
                            DefaultCategoryId = 2,
                            Name = "Supplementary Presentation"
                        },
                        new
                        {
                            Id = 15,
                            Code = "IMAGE",
                            DefaultCategory = 0,
                            DefaultCategoryId = 2,
                            Name = "Supplementary Image"
                        },
                        new
                        {
                            Id = 16,
                            Code = "AUDIO",
                            DefaultCategory = 0,
                            DefaultCategoryId = 2,
                            Name = "Supplementary Audio"
                        },
                        new
                        {
                            Id = 17,
                            Code = "VIDEO",
                            DefaultCategory = 0,
                            DefaultCategoryId = 2,
                            Name = "Supplementary Video"
                        },
                        new
                        {
                            Id = 4,
                            Code = "SUPPLEMENTARY_FILE",
                            DefaultCategory = 0,
                            DefaultCategoryId = 3,
                            Name = "Other Supplementary File"
                        },
                        new
                        {
                            Id = 5,
                            Code = "REVIEW_REPORT",
                            DefaultCategory = 0,
                            DefaultCategoryId = 3,
                            Name = "Reviewer Report"
                        },
                        new
                        {
                            Id = 6,
                            Code = "XML",
                            DefaultCategory = 0,
                            DefaultCategoryId = 3,
                            Name = "XML"
                        },
                        new
                        {
                            Id = 7,
                            Code = "AUTHORS_PROOF",
                            DefaultCategory = 0,
                            DefaultCategoryId = 3,
                            Name = "Author's Proof"
                        },
                        new
                        {
                            Id = 9,
                            Code = "PUBLISHERS_PROOF",
                            DefaultCategory = 0,
                            DefaultCategoryId = 3,
                            Name = "Publisher's Proof"
                        },
                        new
                        {
                            Id = 10,
                            Code = "HTML",
                            DefaultCategory = 0,
                            DefaultCategoryId = 3,
                            Name = "HTML"
                        },
                        new
                        {
                            Id = 19,
                            Code = "EPUB",
                            DefaultCategory = 0,
                            DefaultCategoryId = 3,
                            Name = "ePub"
                        },
                        new
                        {
                            Id = 20,
                            Code = "AUTHORS_CORRECTIONS",
                            DefaultCategory = 0,
                            DefaultCategoryId = 3,
                            Name = "Author Corrections"
                        },
                        new
                        {
                            Id = 21,
                            Code = "AUTHORSHIP_CHANGE_FORMS",
                            DefaultCategory = 0,
                            DefaultCategoryId = 3,
                            Name = "Authorship Change"
                        },
                        new
                        {
                            Id = 22,
                            Code = "PUBLISHERS_CORRECTIONS",
                            DefaultCategory = 0,
                            DefaultCategoryId = 3,
                            Name = "Publisher Corrections"
                        },
                        new
                        {
                            Id = 23,
                            Code = "CROSSREF_XML",
                            DefaultCategory = 0,
                            DefaultCategoryId = 3,
                            Name = "CrossRefXML"
                        });
                });

            modelBuilder.Entity("Production.Domain.Entities.Author", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ArticleId")
                        .HasColumnType("int");

                    b.Property<string>("Country")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Email")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ArticleId");

                    b.HasIndex("UserId");

                    b.HasIndex("FirstName", "LastName");

                    b.ToTable("Authors");
                });

            modelBuilder.Entity("Production.Domain.Entities.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ArticleId")
                        .HasColumnType("int");

                    b.Property<int>("CreatedById")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LasModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<int?>("LastModifiedById")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<int>("TypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ArticleId", "TypeId")
                        .IsUnique();

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("Production.Domain.Entities.File", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AssetId")
                        .HasColumnType("int");

                    b.Property<int>("CreatedById")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("Extension")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("FileServerId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("LasModifiedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<int?>("LastModifiedById")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int>("LatestActionId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Final name of the file after renaming");

                    b.Property<string>("OriginalName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasComment("Full file name, with extension");

                    b.Property<int>("Size")
                        .HasColumnType("int")
                        .HasComment("Size of the file in kilobytes");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AssetId");

                    b.ToTable("File");
                });

            modelBuilder.Entity("Production.Domain.Entities.FileAction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CreatedById")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("FileId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LasModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<int?>("LastModifiedById")
                        .HasColumnType("int");

                    b.Property<int>("TypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FileId");

                    b.ToTable("FileActions");
                });

            modelBuilder.Entity("Production.Domain.Entities.FileLatestAction", b =>
                {
                    b.Property<int>("FileId")
                        .HasColumnType("int");

                    b.Property<int>("ActionId")
                        .HasColumnType("int");

                    b.HasKey("FileId");

                    b.HasIndex("ActionId")
                        .IsUnique();

                    b.ToTable("FileLatestAction");
                });

            modelBuilder.Entity("Production.Domain.Entities.Journal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Abbreviation")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int>("DefaultTypesetterId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("DefaultTypesetterId");

                    b.ToTable("Journals");
                });

            modelBuilder.Entity("Production.Domain.Entities.Stage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("Stages");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = "INITIAL_ASSESSMENT",
                            Description = "Your Production Specialist is checking your files to make sure we have everything we need to produce an Author’s Proof. We will contact you if we need any further files or information.",
                            Name = "Initial Assessment"
                        },
                        new
                        {
                            Id = 2,
                            Code = "IN_PRODUCTION",
                            Description = "The typesetter is preparing your Author’s Proof. We will contact you if we need any further files or information.",
                            Name = "In Production"
                        },
                        new
                        {
                            Id = 3,
                            Code = "AUTHORS_PROOF",
                            Description = "The Author's Proof is available for you to check and provide corrections. This status is also displayed if we are preparing a further Author's Proof at your request.",
                            Name = "Author's Proof"
                        },
                        new
                        {
                            Id = 4,
                            Code = "FINAL_PRODUCTION",
                            Description = "The typesetter is preparing the final version of your article for publication. We will contact you if we need to check anything further before publication.",
                            Name = "Final Production"
                        },
                        new
                        {
                            Id = 5,
                            Code = "PUBLISHERS_PROOF",
                            Description = "Your Production Specialist is applying quality checks to ensure your article is ready for publication.",
                            Name = "Publisher's Proof"
                        },
                        new
                        {
                            Id = 6,
                            Code = "SCHEDULED_FOR_PUBLICATION",
                            Description = "Your Production Specialist has completed their quality checks. Your article is now scheduled for publication on our website and will appear online within the next few working days.",
                            Name = "Scheduled for Publication"
                        },
                        new
                        {
                            Id = 7,
                            Code = "PUBLISHED",
                            Description = "Congratulations! Your article has been published on our website. The deposition process is ongoing.",
                            Name = "Published"
                        },
                        new
                        {
                            Id = 8,
                            Code = "DEPOSITED",
                            Description = "Your article has been published and sent to all relevant repositories, and the publication process is now complete. Please note that repositories have different processing times and your article may not be available yet.",
                            Name = "Deposited"
                        },
                        new
                        {
                            Id = 9,
                            Code = "PUBLISHING",
                            Description = "",
                            Name = "Scheduled for Publication (Publishing)"
                        });
                });

            modelBuilder.Entity("Production.Domain.Entities.StageHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ArticleId")
                        .HasColumnType("int");

                    b.Property<int>("StageId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ArticleId");

                    b.HasIndex("StageId");

                    b.ToTable("StageHistories");
                });

            modelBuilder.Entity("Production.Domain.Entities.Typesetter", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("CompanyName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool?>("IsDefault")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.HasKey("UserId");

                    b.ToTable("Typesetters");
                });

            modelBuilder.Entity("Production.Domain.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Title")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Production.Domain.Entities.Article", b =>
                {
                    b.HasOne("Production.Domain.Entities.Journal", "Journal")
                        .WithMany("Articles")
                        .HasForeignKey("JournalId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Production.Domain.Entities.User", "PublishedBy")
                        .WithMany()
                        .HasForeignKey("PublishedById");

                    b.HasOne("Production.Domain.Entities.User", "SubmitedBy")
                        .WithMany()
                        .HasForeignKey("SubmitedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Production.Domain.Entities.Typesetter", "Typesetter")
                        .WithMany()
                        .HasForeignKey("TypesetterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Journal");

                    b.Navigation("PublishedBy");

                    b.Navigation("SubmitedBy");

                    b.Navigation("Typesetter");
                });

            modelBuilder.Entity("Production.Domain.Entities.ArticleCurrentStage", b =>
                {
                    b.HasOne("Production.Domain.Entities.Article", "Article")
                        .WithOne("CurrentStage")
                        .HasForeignKey("Production.Domain.Entities.ArticleCurrentStage", "ArticleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Production.Domain.Entities.Stage", "Stage")
                        .WithOne()
                        .HasForeignKey("Production.Domain.Entities.ArticleCurrentStage", "StageId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Article");

                    b.Navigation("Stage");
                });

            modelBuilder.Entity("Production.Domain.Entities.Asset", b =>
                {
                    b.HasOne("Production.Domain.Entities.Article", "Article")
                        .WithMany("Assets")
                        .HasForeignKey("ArticleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Production.Domain.Entities.AssetType", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Article");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("Production.Domain.Entities.AssetLatestFile", b =>
                {
                    b.HasOne("Production.Domain.Entities.Asset", "Asset")
                        .WithOne("LatestFile")
                        .HasForeignKey("Production.Domain.Entities.AssetLatestFile", "AssetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Production.Domain.Entities.File", "File")
                        .WithOne()
                        .HasForeignKey("Production.Domain.Entities.AssetLatestFile", "FileId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Asset");

                    b.Navigation("File");
                });

            modelBuilder.Entity("Production.Domain.Entities.Author", b =>
                {
                    b.HasOne("Production.Domain.Entities.Article", "Article")
                        .WithMany("Authors")
                        .HasForeignKey("ArticleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Production.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Article");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Production.Domain.Entities.Comment", b =>
                {
                    b.HasOne("Production.Domain.Entities.Article", "Article")
                        .WithMany("Comments")
                        .HasForeignKey("ArticleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Article");
                });

            modelBuilder.Entity("Production.Domain.Entities.File", b =>
                {
                    b.HasOne("Production.Domain.Entities.Asset", "Asset")
                        .WithMany("Files")
                        .HasForeignKey("AssetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Asset");
                });

            modelBuilder.Entity("Production.Domain.Entities.FileAction", b =>
                {
                    b.HasOne("Production.Domain.Entities.File", "File")
                        .WithMany("FileActions")
                        .HasForeignKey("FileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("File");
                });

            modelBuilder.Entity("Production.Domain.Entities.FileLatestAction", b =>
                {
                    b.HasOne("Production.Domain.Entities.FileAction", "Action")
                        .WithOne()
                        .HasForeignKey("Production.Domain.Entities.FileLatestAction", "ActionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Production.Domain.Entities.File", "File")
                        .WithOne("LatestAction")
                        .HasForeignKey("Production.Domain.Entities.FileLatestAction", "FileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Action");

                    b.Navigation("File");
                });

            modelBuilder.Entity("Production.Domain.Entities.Journal", b =>
                {
                    b.HasOne("Production.Domain.Entities.Typesetter", "DefaultTypesetter")
                        .WithMany()
                        .HasForeignKey("DefaultTypesetterId")
                        .HasPrincipalKey("Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("DefaultTypesetter");
                });

            modelBuilder.Entity("Production.Domain.Entities.StageHistory", b =>
                {
                    b.HasOne("Production.Domain.Entities.Article", "Article")
                        .WithMany("StageHistories")
                        .HasForeignKey("ArticleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Production.Domain.Entities.Stage", "Stage")
                        .WithMany()
                        .HasForeignKey("StageId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Article");

                    b.Navigation("Stage");
                });

            modelBuilder.Entity("Production.Domain.Entities.Typesetter", b =>
                {
                    b.HasOne("Production.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Production.Domain.Entities.Article", b =>
                {
                    b.Navigation("Assets");

                    b.Navigation("Authors");

                    b.Navigation("Comments");

                    b.Navigation("CurrentStage")
                        .IsRequired();

                    b.Navigation("StageHistories");
                });

            modelBuilder.Entity("Production.Domain.Entities.Asset", b =>
                {
                    b.Navigation("Files");

                    b.Navigation("LatestFile")
                        .IsRequired();
                });

            modelBuilder.Entity("Production.Domain.Entities.File", b =>
                {
                    b.Navigation("FileActions");

                    b.Navigation("LatestAction")
                        .IsRequired();
                });

            modelBuilder.Entity("Production.Domain.Entities.Journal", b =>
                {
                    b.Navigation("Articles");
                });
#pragma warning restore 612, 618
        }
    }
}
